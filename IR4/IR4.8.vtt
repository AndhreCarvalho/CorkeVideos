WEBVTT
Kind: captions
Language: pt-BR

00:00:03.720 --> 00:00:07.480
Vamos resumir algumas da ideias principais
que aprendemos nesse curso. Existe

00:00:07.480 --> 00:00:12.910
uma importante distinção entre um caminho é uma
trajetória. Um caminho é uma construção espacial

00:00:12.910 --> 00:00:19.839
e nos informa como chegamos de A até B através do mundo.
Uma trajetória é um caminho com um cronograma.

00:00:19.839 --> 00:00:24.400
Ela nos informa quão rápido devemos no mover ao longo
do caminho, em que tempo devemos estar em um

00:00:24.400 --> 00:00:30.019
ponto ao longo do caminho. É importante nas
trajetórias que a posição e orientação

00:00:30.019 --> 00:00:34.710
variem suavemente no tempo. Nós fazemos isso por 
uma série de razões. Queremos reduzir a aceleração

00:00:34.710 --> 00:00:39.540
máxima no robô, nos permitindo reduzir o 
tamanho dos motores, e isso talvez reduza 

00:00:39.540 --> 00:00:44.190
as vibrações induzidas na estrutura do robô.
O que suave significa? significa que

00:00:44.190 --> 00:00:49.730
a posição é contínua assim como uma função de tem-
po e a velocidade é contínua assim como uma função

00:00:49.730 --> 00:00:55.120
de tempo. E, esperaríamos que a aceleração seja
contínua e talvez a arrancada seja contínua

00:00:55.120 --> 00:01:00.480
e assim em diante através das derivadas de maior
ordem. Em robótica, uma técnica comum para gerar

00:01:00.480 --> 00:01:07.100
uma trajetória é usar uma polinomial, tipicamente,
uma polinomial de quinta ordem que tem seis coeficientes

00:01:07.100 --> 00:01:13.170
os quais nos permitem independentemente especificar
seis condições de limites, a posição inicial e final,

00:01:13.170 --> 00:01:19.030
a velocidade inicial e final, a aceleração
inicial e final. E, podemos escrever essa simples

00:01:19.030 --> 00:01:24.930
relação de matrizes que nos dá os valores dos
coreficientes como uma função do tempo de trajetória,

00:01:24.930 --> 00:01:31.490
T maiúsculo, e as condições de limite. Existe, 
entretanto, um problema de performance com trajetórias

00:01:31.490 --> 00:01:37.520
polinomiais, que a velocidade de pico é quase
sempre duas vezes a velocidade média, e estamos

00:01:37.520 --> 00:01:41.870
perdendo performance do motor e efetivamente levando
duas vezes mais tempo para chegar onde queremos

00:01:41.870 --> 00:01:45.260
chegar.
Uma trajetória mais eficiente é a que é chamada

00:01:45.260 --> 00:01:51.140
de perfil trapezoidal, onde temos uma
fase de aceleração seguida de uma fase de

00:01:51.140 --> 00:01:57.330
velocidade de inércia ou constante, seguida de
uma fase de desaceleração. Uma leve desvantagem

00:01:57.330 --> 00:02:03.260
do perfil trapezoidal é que a segunda 
derivada, a aceleração, é descontínua,

00:02:03.260 --> 00:02:08.670
mas existem muitas, muitas outras qualidades e é
muito, muito usado em robótica e controle de máquinas-

00:02:08.670 --> 00:02:14.110
ferramenta. Se queremos nos mover de um
ponto para outro através de alguns pontos

00:02:14.110 --> 00:02:20.590
intermediários que chamamos de pontos de passagem, 
então a fim de atingir continuidade

00:02:20.590 --> 00:02:25.650
no caminho, precisamos introduzir o que chamamos de
harmonizadores e eles estão mostrados aqui em vermelho.

00:02:25.650 --> 00:02:30.330
Nós introduzimos um período de aceleração 
transição da velocidade para chegar, por exemplo,

00:02:30.330 --> 00:02:35.880
o ponto 2, para a velocidade que precisamos
para chegar no ponto 3. A desvantagem é que 

00:02:35.880 --> 00:02:38.940
nunca chegamos de fato ao ponto que queremo
ir.

00:02:38.940 --> 00:02:43.860
Se o tempo de aceleração é pequeno, chegamos
bem perto dos pontos de passagem, mas a aceleração

00:02:43.860 --> 00:02:49.580
on the machine is high. Acceleration time
is large, then the acceleration of the robot

00:02:49.580 --> 00:02:55.349
is low, but we miss the via points by a larger
amount. We introduced the notion of interpolating

00:02:55.349 --> 00:03:01.239
between an initial value and a final value
based on a scalar S which varies between 0

00:03:01.239 --> 00:03:07.260
and 1. 0 gives us the initial value, 1 gives
us the final value, and 0.5 is halfway in

00:03:07.260 --> 00:03:13.790
between. X can be a vector. And, if S is a
smooth function of time, then so is X.

00:03:13.790 --> 00:03:19.830
We talked about how we cannot apply this simple
interpolation scheme to rotation matrices.

00:03:19.830 --> 00:03:24.599
Rotation matrices are special. They are orthogonal
matrices. So, adding two of them together

00:03:24.599 --> 00:03:31.030
does not result in another orthogonal matrix.
So, we don’t do this to rotation matrices.

00:03:31.030 --> 00:03:37.160
Instead, what we can do is convert our rotation
to a set of angles. It could be Euler angles,

00:03:37.160 --> 00:03:43.090
it could be roll, pitch, yaw angles, and we
can interpolate those. We introduced the direction

00:03:43.090 --> 00:03:47.709
problem. When we’re interpolating an angle
from an initial value to a final value, it’s

00:03:47.709 --> 00:03:53.239
important to remember that there are two ways
we can travel around the circle. We can travel

00:03:53.239 --> 00:03:58.030
the long way which is shown here in blue,
or the short way which is shown here in red

00:03:58.030 --> 00:04:04.640
through the value of Theta equals pi. We can
interpolate quaternions. We need a more complex

00:04:04.640 --> 00:04:09.629
formula in which to do this. Interpolation,
once again, is a function of S and S varies

00:04:09.629 --> 00:04:14.780
from 0 to 1. And, an important parameter in
this interpolation is Theta which is determined

00:04:14.780 --> 00:04:20.699
from the parameters of the initial and final
quaternion. Quaternion interpolation provides

00:04:20.699 --> 00:04:25.370
the shortest and most direct path between
two orientations.

00:04:25.370 --> 00:04:30.850
This figure shows the position of the tip
of a vector which is undergoing different

00:04:30.850 --> 00:04:36.900
types of rotational interpolation. The white
path is due to quaternion interpolation and,

00:04:36.900 --> 00:04:41.560
as just mentioned, it’s the shortest and
most direct path. We can see that the Euler

00:04:41.560 --> 00:04:46.810
angle and roll, pitch, yaw angle interpolation
paths deviate from that. That means that they

00:04:46.810 --> 00:04:54.460
take a longer and more indirect path between
the two orientations. Finally, we come to

00:04:54.460 --> 00:05:01.340
pose interpolation, often referred to as Cartesian
interpolation. We have two poses, pose 0 and

00:05:01.340 --> 00:05:07.160
pose 1, which each represented by a rotation
matrix and a translation vector. We can convert

00:05:07.160 --> 00:05:13.560
the rotation matrix to a quaternion. Interpolating
the translation is very simple. We apply linear

00:05:13.560 --> 00:05:19.060
interpolation to the translational component,
and then we apply quaternion interpolation

00:05:19.060 --> 00:05:25.000
to the rotation component. We can convert
the interpolated quaternion back to a rotation

00:05:25.000 --> 00:05:28.440
matrix, combine it with the interpolated translation

00:05:28.500 --> 00:05:32.420
to rebuild a homogeneous transformation if that’s what we want.

