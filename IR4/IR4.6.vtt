WEBVTT
Kind: captions
Language: pt-BR

00:00:03.439 --> 00:00:07.500
Nós falamos sobre como podemos
interpolar linearmente a posição.

00:00:07.500 --> 00:00:10.660
O que fazemos no caso de rotações?

00:00:10.660 --> 00:00:16.580
Poderíamos ingenuamente reescrever nossa expressão
como esta onde temos o valor inicial da rotação, a

00:00:16.580 --> 00:00:19.380
rotação final e a rotação intermediária.

00:00:19.380 --> 00:00:21.960
Mas, há um problema com este esquema.

00:00:21.960 --> 00:00:25.620
Uma matriz de rotação não é simplesmente 
uma matriz 3x3 antiga

00:00:25.620 --> 00:00:27.100
É uma matriz especial.

00:00:27.100 --> 00:00:32.990
É uma matriz ortogonal o que significa que
cada coluna na matriz é um vetor unitário

00:00:32.990 --> 00:00:39.519
Então, se eu adicionar duas matrizes ortogonais, o
resultado nunca vai ser uma matriz ortogonal porque

00:00:39.519 --> 00:00:44.480
se eu puder vê cada coluna, a soma de
dois vetores unitários, nunca pode ser um

00:00:44.480 --> 00:00:45.480
vetor unitário

00:00:45.480 --> 00:00:50.269
Logo, esta não é uma estratégia que 
podemos usar para interpolar rotações

00:00:50.269 --> 00:00:54.819
Precisamos considerar outras maneiras de 
representar rotações que podemos interpolar

00:00:54.819 --> 00:01:00.679
Portanto, uma maneira de conseguir isso é lembrar que
essa fórmula de interpolação trabalha com vetores

00:01:00.679 --> 00:01:05.640
e podemos representar uma rotação em 
termos de um vetor de ângulos

00:01:05.640 --> 00:01:10.500
Pode ser três ângulos de Euler ou pode ser
três ângulos de roll, pitch e yaw

00:01:10.500 --> 00:01:16.740
Então, se nós consideramos este vetor de ângulos
com o simbolo Gama, então podemos introduzir os

00:01:16.740 --> 00:01:22.440
ângulos iniciais, os ângulos finais, e finalmente
podemos interpolar os ângulos intermediários 

00:01:22.440 --> 00:01:26.490
Se nossas orientações inicial e final são
dadas em termos de matrizes de rotação, então

00:01:26.490 --> 00:01:31.850
as convertemos em um conjunto inicial
e um conjunto final de ângulos

00:01:31.850 --> 00:01:37.820
Nós interpolamos os ângulos intermediários e
podemos convertê-los de volta em uma matriz de rotação

00:01:37.820 --> 00:01:39.240
Se assim desejamos.

00:01:39.240 --> 00:01:44.420
Vamos usar a função jtraj, que vimos há
pouco para interpolar os ângulos de roll

00:01:44.420 --> 00:01:45.580
pitch e yaw.

00:01:45.580 --> 00:01:52.280
Eu vou colocar o resultado na variável da área 
de trabalho X. Chame a função jtraj. 

00:01:52.280 --> 00:01:57.500
Eu vou interpolar entre um conjunto de ângulos 
de roll, pitch e yaw e roll igual a 

00:01:57.500 --> 00:02:06.480
0 e o conjunto final de ângulos roll, pitch e yaw
iguais a menos pi sobre 2, mais pi 

00:02:06.480 --> 00:02:09.410
sobre 2 e pi sobre 4.

00:02:09.410 --> 00:02:15.620
E, eu vou fazer essa interpolação mais de
cem etapas de tempo.

00:02:15.620 --> 00:02:20.420
O resultado é uma nova variável em nossa área de
trabalho que tem 100 linhas, cada linha corresponde

00:02:20.420 --> 00:02:21.420
a uma etapa de tempo.

00:02:21.420 --> 00:02:28.810
E, temos três colunas e as colunas correspondem
aos ângulos de roll, pitch e yaw.

00:02:28.810 --> 00:02:32.600
Eu posso plotar estes ângulos de 
roll, pitch e yaw pelo tempo

00:02:32.600 --> 00:02:37.370
Aqui podemos vê como eles se movem,
do valor inicial para o 

00:02:37.370 --> 00:02:38.370
valor final.

00:02:38.370 --> 00:02:44.569
Agora, nós queremos converter o ângulo de roll,
pitch e yaw em cada linha da matriz X em uma

00:02:44.569 --> 00:02:45.750
rotation matrix.

00:02:45.750 --> 00:02:51.400
And to do that, I’m going to use the rpy2r
function that we looked at previously and

00:02:51.400 --> 00:02:52.569
I’m going to pass in X.

00:02:52.569 --> 00:02:58.819
And what the function will do in this case
is it will convert every row of this matrix

00:02:58.819 --> 00:03:02.020
into a rotation matrix.

00:03:02.020 --> 00:03:08.530
The result is a rotation matrix, but the matrix
has got dimensions of 3 x 3 x 100.

00:03:08.530 --> 00:03:11.600
So we can think of it as a stack of rotation
matrices.

00:03:11.600 --> 00:03:16.260
So we could look at the first one in that
stack and it’s a rotation matrix.

00:03:16.260 --> 00:03:17.260
It looks like this.

00:03:17.260 --> 00:03:18.900
It’s null rotation.

00:03:18.900 --> 00:03:20.430
It’s a unit matrix.

00:03:20.430 --> 00:03:25.580
I could look at the 10th one in the stack
and it looks something like this.

00:03:25.580 --> 00:03:29.390
So R is a sequence of rotation matrices.

00:03:29.390 --> 00:03:37.670
Now I can pass a sequence of rotation matrices
like that to the function tranimate.

00:03:37.670 --> 00:03:42.510
What we will see is an animation showing the
orientation of the coordinate frame changing

00:03:42.510 --> 00:03:48.849
smoothly from the initial orientation specified
in terms of roll, pitch, yaw angles to a final

00:03:48.849 --> 00:03:54.990
orientation also specified in terms of roll,
pitch, yaw angles.

00:03:54.990 --> 00:04:01.090
Euler angles and roll, pitch, yaw angles are
represented as a vector of three angles.

00:04:01.090 --> 00:04:05.930
Each element of these vectors we can consider
as a point on a circle and the path from the

00:04:05.930 --> 00:04:11.290
initial angle to the final angle is an arc
on the unit circle.

00:04:11.290 --> 00:04:15.460
Consider now the case where we have this initial
angle and this final angle.

00:04:15.460 --> 00:04:21.239
And a naive interpolation would move us from
the initial angle to the final angle the long

00:04:21.239 --> 00:04:23.470
way around the circle.

00:04:23.470 --> 00:04:27.350
What we need to remember with angles is that
there are always two ways to get from A to

00:04:27.350 --> 00:04:28.350
B.

00:04:28.350 --> 00:04:31.990
There is potentially the long way and there
is potentially the short way.

00:04:31.990 --> 00:04:37.070
So when we are interpolating each element
in our angle sequence vector, it’s important

00:04:37.070 --> 00:04:40.720
that we choose the shortest path.

00:04:40.720 --> 00:04:46.350
If we look at the angle as a function of time,
the long path is given here in blue.

00:04:46.350 --> 00:04:50.500
We see we’re moving from 2 radians to -2
radians.

00:04:50.500 --> 00:04:55.970
Whereas the short path which is shown in red
moves through an angle of pi radians, pops

00:04:55.970 --> 00:05:03.120
back at minus pi radians and then moves quickly
to the destination point B of a value of -2

00:05:03.120 --> 00:05:04.120
radians.

00:05:04.120 --> 00:05:09.290
Earlier, we introduce quaternions and this
is the equation we used to interpolate between

00:05:09.290 --> 00:05:10.290
dois quatérnios.

00:05:10.290 --> 00:05:15.780
Novamente, é uma função de S onde S varia
de 0 à 1.

00:05:15.780 --> 00:05:20.810
E o elemento importante nesta equação é
Teta, onde Teta é derivado dos elementos

00:05:20.810 --> 00:05:24.590
do quatérnio inicial e do final.

00:05:24.590 --> 00:05:31.260
Isto é referido como interpolação linear esférica
e é o menor e mais direto caminho

00:05:31.260 --> 00:05:34.120
entre quaisquer duas orientações.

00:05:34.120 --> 00:05:40.650
Isto corresponde a uma velocidade angular constante
com relação a um eixo fixo no espaço.

00:05:40.650 --> 00:05:45.370
Criemos um par de quatérnios que 
iremos interpolar.

00:05:45.370 --> 00:05:49.410
O primeiro corresponde a uma rotação nula.

00:05:49.410 --> 00:05:52.540
Vemos que ele possui uma componente vetorial
de 0.

00:05:52.540 --> 00:05:59.261
O segundo quatérnio é a representação de uma 
rotação com relação ao eixo x de pi sobre 2

00:05:59.261 --> 00:06:01.680
Então, nós vamos passar a matrix de rotação.

00:06:01.680 --> 00:06:05.200
A classe de quatérnios irá transformar aquilo
em um quatérnio.

00:06:05.200 --> 00:06:11.270
Agora, existem dois quatérnios em nosso workspace,
um correspondendo a rotação nula, um correspondendo

00:06:11.270 --> 00:06:15.490
a rotação de 90 graus em relação ao eixo x.

00:06:15.490 --> 00:06:18.820
Para interpolar quatérnios, usamo o método
interp.

00:06:18.820 --> 00:06:21.350
Aplicamos aquilo ao quatérnio inicial.

00:06:21.350 --> 00:06:28.970
Assim, o primeiro argumento é o quatérnio final
e o segundo argumento é a posição ao longo de

00:06:28.970 --> 00:06:29.970
uma trajetória.

00:06:29.970 --> 00:06:32.400
Portanto 0 é o primeiro ponto na trajetória.

00:06:32.400 --> 00:06:38.690
Esta é a condição inicial, o quatérnio
inicial que corresponde à rotação nula.

00:06:38.690 --> 00:06:44.639
Eu posso repetir aquilo e pedir o ponto final na
interpolação e isto será igual ao

00:06:44.639 --> 00:06:47.100
segundo quatérnio.

00:06:47.100 --> 00:06:53.540
Agora posso pedir por um ponto médio, 0.5.
E este é o quatérnio interpolado.

00:06:53.540 --> 00:06:59.419
E é claro, posso transformar aquilo de volta 
a uma matrix de rotação, usando o método R.

00:06:59.419 --> 00:07:05.870
Agora, poderíamos querer comparar o efeito dos 
diferentes tipos de interpolações rotacionais

00:07:05.870 --> 00:07:07.130
e isto é um tanto complicado.

00:07:07.130 --> 00:07:10.669
É dificil visualizar uma rotação em particular.

00:07:10.669 --> 00:07:16.270
Porém, uma forma que podemos fazer isto é considerar
o efeito de uma rotação em um vetor em particular.

00:07:16.270 --> 00:07:22.199
Aqui, escolhi o eixo x, o qual represento
por um vetor 1, 0, 0.

00:07:22.199 --> 00:07:28.100
E posso aplicar essas três diferentes sequências
de rotação ao vetor.

00:07:28.100 --> 00:07:34.240
Eu posso interpolar o ângulo de Euler inicial
e o final, o ângulo roll, pitch, yaw inicial 

00:07:34.240 --> 00:07:40.000
e o final ou o quatérnio inicial e o final, e eles
são exibidos em segmentos de diferentes

00:07:40.000 --> 00:07:42.490
cores, plotados nesta esfera.

00:07:42.490 --> 00:07:47.080
O caminho do quatérnio, exibido em branco,
é o mais curto e mais direto.

00:07:47.080 --> 00:07:51.780
Podemos ver que o caminho da interpolação roll,
pitch, yaw desviou significativamente deste.

00:07:51.780 --> 00:07:57.199
Ele tomou um caminho mais indireto e longo
para ir da orientação inicial à

00:07:57.199 --> 00:07:58.840
orientação final.

00:07:58.840 --> 00:08:01.750
Intepolação em quatérniso é o padrão-ouro.

